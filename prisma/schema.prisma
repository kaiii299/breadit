// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Hosted on PLANETSCALE

// 1)npx prisma db push
// 2)npx prisma db generate

//* Authentication Files
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?

  // Each username can only exist once
  username String? @unique

  image    String?
  accounts Account[]
  sessions Session[]
}

// All users Data
model All_Users {
  // CIUD is collision unique identifier
  id         String   @id @default(cuid())
  name       String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  pes        String
  platoon    Platoons @relation(fields: [platoonsId], references: [id])
  status     Json?
  platoonsId String
  // If regular won't be listed in side strength
  regular    Boolean
  ord_date   DateTime
  admin Boolean 
}

// Db so that can add more platoon if needed
model Platoons {
  id        String      @id @default(cuid())
  platoon   String
  All_Users All_Users[]
}
